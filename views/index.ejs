<html>
    <head>
        <title>webcam</title>
        <link rel="stylesheet" type="text/css" href="styles.css">
        <script src="/socket.io/socket.io.js"></script>
    </head>
    <body>
    
        <video id ="myVideoTag" autoplay controls></video>

        <video id ="theirVideoTag" autoplay controls></video>
        <div>
            <label>Your name</label><input id="myName" type="text" />
            <label>Message</label><input id="myMessage" type="text" />
            <input id="sendMessage" type="submit" />
            <div id="chatArea">Message Output: <br></div>

        </div>

        <div id="signalingArea">signaling message:<br></div>
    </body>
    <script>
         var myVideoArea = document.querySelector("#myVideoTag");
         var theirVideoArea = document.querySelector("#theirVideoTag");
         
         //chat room variables:
         var myName = document.querySelector("#myName");
         var myMessage = document.querySelector("#myMessage");
         var sendMessage = document.querySelector("#sendMessage");
         var chatArea = document.querySelector("#chatArea");
         var ROOM = "chat";
         var SIGNAL_ROOM ="signal_room";

         var configuration ={
             'iceServers':[{
                 'url': 'stun:stun.l.google.com:19302'
             }]
         };
         var rtcPeerConn;



         //signaling usage
         var signalingArea = document.querySelector("#signalingArea");

        // deprecated MediaStreamTrack.getSources(getCameras);
        // navigator.mediaDevices.enumerateDevices()
        //     .then(getCameras)
        //     .catch((err) => {
        //         console.log(err.name + ": " + err.message);
        //     });

        //  startStream();
         io = io.connect();
         io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM});

         io.emit('signal', {"type": "user_here", "message":"are you ready kids?", "room": SIGNAL_ROOM});

        io.on('signaling_message', function(data){
            displaySignalMessage("Signal received: "+ data.type);

            if(!rtcPeerConn)
                startSignaling();

            if (data.type!="user_here"){
                var message=JSON.parse(data.message);

                if(message.sdp){
                    rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function(){
                        if(rtcPeerConn.remoteDescription.type =='offer'){
                            rtcPeerConn.createAnswer(sendLocalDesc, logError);
                        }
                    },logError);
        
                }else{
                    rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                }
            }
        });

        function startSignaling(){
            displaySignalMessage("starting signaling..");

            rtcPeerConn = new webkitRTCPeerConnection(configuration);
            rtcPeerConn.onicecandidate=function(evt){
                if (evt.candidate)
                    io.emit('signal', {"type": "ice candidate", "message": JSON.stringify({'candidate': evt.candidate}), "room": SIGNAL_ROOM});
                    displaySignalMessage("completed that ice candidate!");
            };

            rtcPeerConn.onnegotiationneeded=function(){
                displaySignalMessage("on negotiation called");
                rtcPeerConn.createOffer(sendLocalDesc, logError);
            }

            rtcPeerConn.onaddstream = function(evt){
                displaySignalMessage("going to add their stream ...");
                theirVideoArea.src= URL.createObjectURL(evt.stream);
            };

             navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
             navigator.getUserMedia({'audio': true, 'video': false}, function(stream){ 
                    displaySignalMessage("going to display my stream..");
                    myVideoArea.src = URL.createObjectURL(stream);
                    rtcPeerConn.addStream(stream);
                },logError);
            
        }

        function sendLocalDesc(desc){
            rtcPeerConn.setLocalDescription(desc, function(){
                displaySignalMessage("sending local description");
                io.emit('signal', {"type":"SDP", "message": JSON.stringify({'sdp': rtcPeerConn.localDescription}), "room": SIGNAL_ROOM});
            }, logError);

        }

        function logError(error){
            displaySignalMessage(error.name+': '+error.message);

        }

        

         io.on('announce', function(data){
             displayMessage(data.message);
         });

         //update the chat tag
         io.on('message', function(data){
             displayMessage(data.author+": "+ data.message);
         });

         function displayMessage(message){
                chatArea.innerHTML=chatArea.innerHTML + "<br/>"+ message;
         }

         function displaySignalMessage(message){
               // signalingArea.innerHTML=signalingArea.innerHTML + "<br/>"+ message;
               console.log(message);
         }

         sendMessage.addEventListener('click', function(ev){
             io.emit('send',{"author": myName.value, "message": myMessage.value, "room": ROOM});
             ev.preventDefault();
         }, false);
     

        // function startStream(){
            

        //     navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            
        //     var videoSource = videoSelect.value;
        //     var constraints = {
        //                 audio: false, 
        //                 // video: false

        //                 video: {
        //                     mandatory:{
        //                         minWidth:240,
        //                         maxWidth:240,
        //                         minHeight:240,
        //                         maxHeight:240
        //                     },
        //                     optional: [{
        //                         sourceId:videoSource
        //                     }]
        //                 }
        //             }
                    

            
        //         navigator.getUserMedia(constraints, onSuccess, onError);

        // }
        function onSuccess(stream){
            console.log("success");
            videoArea.src = window.URL.createObjectURL(stream);
            // videoArea.className="grayscale_filter";
            videoArea.play();

        }

        function getCameras(devices) {
            devices.forEach(function (device) {
                var option = document.createElement('option');
                option.value = device.id;
                if (device.kind === 'videoinput') {
                    option.text = device.label || 'camera ' + (videoSelect.length + 1);
                    videoSelect.appendChild(option);
                }
            });
        }

        function onError(error){
            console.log(error);

        }


    </script>
</html>