<html>
    <head>
        <title>webcam</title>
        <link rel="stylesheet" type="text/css" href="styles.css">
        <script src="/socket.io/socket.io.js"></script>
    </head>
    <body>
        <div>
            Video: <select id="camera"></select>
        </div>

        <video id ="videoTag" autoplay></video>
        <div>
            <label>Your name</label><input id="myName" type="text" />
            <label>Message</label><input id="myMessage" type="text" />
            <input id="sendMessage" type="submit" />
            <div id="chatArea">Message Output: <br></div>

        </div>
    </body>
    <script>
         var videoArea = document.querySelector("video");
         var videoSelect = document.querySelector('#camera');

         //chat room variables:
         var myName = document.querySelector("#myName");
         var myMessage = document.querySelector("#myMessage");
         var sendMessage = document.querySelector("#sendMessage");
         var chatArea = document.querySelector("#chatArea");
         var ROOM = "chat";

        // deprecated MediaStreamTrack.getSources(getCameras);
        // navigator.mediaDevices.enumerateDevices()
        //     .then(getCameras)
        //     .catch((err) => {
        //         console.log(err.name + ": " + err.message);
        //     });

         //startStream();
         io = io.connect();
         io.emit('ready', ROOM);

         io.on('announce', function(data){
             displayMessage(data.message);
         });

         io.on('message', function(data){
             displayMessage(data.author+": "+ data.message);
         });

         function displayMessage(message){
                chatArea.innerHTML=chatArea.innerHTML + "<br/>"+ message;
         }

         sendMessage.addEventListener('click', function(ev){
             io.emit('send',{"author": myName.value, "message": myMessage.value, "room": ROOM});
             ev.preventDefault();
         }, false);
     

        function startStream(){
            

            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            
            var videoSource = videoSelect.value;
            var constraints = {
                        audio: false, 
                        video: false

                        // video: {
                        //     mandatory:{
                        //         minWidth:240,
                        //         maxWidth:240,
                        //         minHeight:240,
                        //         maxHeight:240
                        //     },
                        //     optional: [{
                        //         sourceId:videoSource
                        //     }]
                        }
                    

            
                navigator.getUserMedia(constraints, onSuccess, onError);

        }
        function onSuccess(stream){
            console.log("success");
            videoArea.src = window.URL.createObjectURL(stream);
            // videoArea.className="grayscale_filter";
            videoArea.play();

        }

        function getCameras(devices) {
            devices.forEach(function (device) {
                var option = document.createElement('option');
                option.value = device.id;
                if (device.kind === 'videoinput') {
                    option.text = device.label || 'camera ' + (videoSelect.length + 1);
                    videoSelect.appendChild(option);
                }
            });
        }

        function onError(error){
            console.log(error);

        }


    </script>
</html>